#!/bin/bash
# Bash completion for dots command

_dots_completion() {
    local cur prev words cword
    _init_completion || return

    local DOTFILES="$HOME/.config/dots"

    # Subcommands
    local subcommands="setup snatch link unlink eject rm sync push update status version help"

    # If we're completing the first argument (subcommand)
    if [[ $cword -eq 1 ]]; then
        COMPREPLY=($(compgen -W "$subcommands" -- "$cur"))
        return
    fi

    local subcommand="${words[1]}"

    # Check if first argument is a profiled config
    if [[ -f "$DOTFILES/config/$subcommand/.profiled" ]]; then
        # Profile system completions
        if [[ $cword -eq 2 ]]; then
            # Suggest profile subcommands and existing profiles
            local profile_cmds="track init list rm untrack"
            local profiles=()

            if [[ -d "$DOTFILES/config/$subcommand/profiles" ]]; then
                while IFS= read -r -d '' profile; do
                    profiles+=("$(basename "$profile")")
                done < <(find "$DOTFILES/config/$subcommand/profiles" -maxdepth 1 -mindepth 1 -type d -print0 2>/dev/null)
            fi

            COMPREPLY=($(compgen -W "$profile_cmds ${profiles[*]}" -- "$cur"))
            return
        elif [[ $cword -ge 3 ]]; then
            local profile_cmd="${words[2]}"
            case "$profile_cmd" in
                track|untrack)
                    # Complete with files in config root
                    local files=()
                    while IFS= read -r -d '' file; do
                        [[ -f "$file" ]] && files+=("$(basename "$file")")
                    done < <(find "$DOTFILES/config/$subcommand" -maxdepth 1 -mindepth 1 -print0 2>/dev/null)
                    COMPREPLY=($(compgen -W "${files[*]}" -- "$cur"))
                    ;;
                rm)
                    # Complete with profile names
                    local profiles=()
                    while IFS= read -r -d '' profile; do
                        profiles+=("$(basename "$profile")")
                    done < <(find "$DOTFILES/config/$subcommand/profiles" -maxdepth 1 -mindepth 1 -type d -print0 2>/dev/null)
                    COMPREPLY=($(compgen -W "${profiles[*]}" -- "$cur"))
                    ;;
            esac
            return
        fi
    fi

    case "$subcommand" in
        snatch)
            # Complete with configs in ~/.config/ and ~/ that aren't symlinks
            local configs=()

            # Add from ~/.config/ (without dots)
            while IFS= read -r -d '' config; do
                local name=$(basename "$config")
                [[ -L "$config" ]] && continue  # Skip symlinks
                configs+=("$name")
            done < <(find "$HOME/.config" -maxdepth 1 -mindepth 1 -print0 2>/dev/null)

            # Add from ~/ (with original names, starting with dot)
            while IFS= read -r -d '' config; do
                local name=$(basename "$config")
                [[ ! "$name" =~ ^\. ]] && continue  # Only dot files
                [[ -L "$config" ]] && continue  # Skip symlinks
                configs+=("$name")
            done < <(find "$HOME" -maxdepth 1 -mindepth 1 -name ".*" -print0 2>/dev/null)

            COMPREPLY=($(compgen -W "${configs[*]}" -- "$cur"))
            ;;

        link|eject)
            # Complete with configs in dots repo
            local configs=()

            # Add from config/
            while IFS= read -r -d '' config; do
                local name=$(basename "$config")
                configs+=("$name")
            done < <(find "$DOTFILES/config" -maxdepth 1 -mindepth 1 -print0 2>/dev/null)

            # Add from home/
            while IFS= read -r -d '' config; do
                local name=$(basename "$config")
                configs+=("$name")
            done < <(find "$DOTFILES/home" -maxdepth 1 -mindepth 1 -print0 2>/dev/null)

            COMPREPLY=($(compgen -W "${configs[*]}" -- "$cur"))
            ;;

        unlink)
            # Complete with configs that are currently symlinked to dots
            local configs=()

            # Check ~/.config/
            while IFS= read -r -d '' config; do
                local name=$(basename "$config")
                [[ ! -L "$config" ]] && continue
                local target=$(readlink "$config")
                [[ "$target" == "$DOTFILES/"* ]] && configs+=("$name")
            done < <(find "$HOME/.config" -maxdepth 1 -mindepth 1 -print0 2>/dev/null)

            # Check ~/
            while IFS= read -r -d '' config; do
                local name=$(basename "$config")
                [[ ! "$name" =~ ^\. ]] && continue
                [[ ! -L "$config" ]] && continue
                local target=$(readlink "$config")
                [[ "$target" == "$DOTFILES/"* ]] && configs+=("$name")
            done < <(find "$HOME" -maxdepth 1 -mindepth 1 -name ".*" -print0 2>/dev/null)

            COMPREPLY=($(compgen -W "${configs[*]}" -- "$cur"))
            ;;

        rm)
            # Complete with any config in ~/.config/ and ~/
            local configs=()

            # Add from ~/.config/
            while IFS= read -r -d '' config; do
                local name=$(basename "$config")
                configs+=("$name")
            done < <(find "$HOME/.config" -maxdepth 1 -mindepth 1 -print0 2>/dev/null)

            # Add from ~/ (dot files only)
            while IFS= read -r -d '' config; do
                local name=$(basename "$config")
                [[ ! "$name" =~ ^\. ]] && continue
                configs+=("$name")
            done < <(find "$HOME" -maxdepth 1 -mindepth 1 -name ".*" -print0 2>/dev/null)

            COMPREPLY=($(compgen -W "${configs[*]}" -- "$cur"))
            ;;

        setup|sync|push|update|status|version|help)
            # No completion for these commands
            ;;
    esac
}

complete -F _dots_completion dots
